/*************************************************************************** * Copyright 2001-2003 The eXo Platform SARL         All rights reserved.  * * Please look at license.txt in info directory for more license detail.   * **************************************************************************/package org.exoplatform.faces;import java.util.HashMap;import org.exoplatform.container.configuration.ConfigurationManager;import org.exoplatform.container.configuration.ServiceConfiguration;import org.exoplatform.container.configuration.ValueParam;import org.exoplatform.faces.core.event.ExoActionListener;/** * @author Tuan Nguyen (tuan08@users.sourceforge.net) * @since Aug 13, 2004 * @version $Id: ActionListenerManager.java,v 1.3 2004/09/09 03:22:19 tuan08 Exp $ */public class ActionListenerManager extends HashMap {  private boolean cacheActionListener_ ;    public ActionListenerManager(ConfigurationManager manager) throws Exception {    ServiceConfiguration sconf = manager.getServiceConfiguration(getClass()) ;    ValueParam param = sconf.getValueParam("cache.action.listener") ;    if(param != null) {      cacheActionListener_ = "true".equals(param.getValue()) ;    } else {      cacheActionListener_ = false ;    }  }    public ExoActionListener getActionListener(Class clazz, String actionToListen)  {    if(!cacheActionListener_)  return createListener(clazz, actionToListen) ;    String key = actionToListen + "#" + clazz.getName() ;    ExoActionListener result = (ExoActionListener) get(key) ;    if(result != null) return result ;    synchronized (this) {      result = createListener(clazz, actionToListen) ;      put(key, result) ;    }    return result ;  }    private ExoActionListener createListener(Class clazz, String actionToListen) {    try {      ExoActionListener result = (ExoActionListener) clazz.newInstance() ;      result.init() ;      result.setActionToListen(actionToListen) ;      return result ;    } catch (Exception ex) {      ex.printStackTrace() ;    }    return null ;  }}