/*************************************************************************** * Copyright 2001-2003 The eXo Platform SARL         All rights reserved.  * * Please look at license.txt in info directory for more license detail.   * **************************************************************************/package org.exoplatform.faces.core.component;import java.util.*;import javax.faces.application.FacesMessage;import javax.faces.context.FacesContext;import javax.faces.event.PhaseId;import javax.faces.validator.Validator;import javax.faces.validator.ValidatorException;import org.exoplatform.faces.application.ExoFacesMessage;import org.exoplatform.faces.core.Util;import org.exoplatform.faces.core.event.ExoActionEvent;/** * Wed, Dec 22, 2003 @ 23:14  * @author: Tuan Nguyen * @email:   tuan08@users.sourceforge.net * @version: $Id: UIGrid.java,v 1.6 2004/08/07 18:11:24 tuan08 Exp $ */public class UIForm extends UIExoCommand {  public static final String  COMPONENT_FAMILY = "org.exoplatform.faces.core.component.UIForm" ;  private Map  mapFields_ ;  private List containers_ ;  private List buttons_ ;  private String formName_ ;  protected List fieldValidators_ ;  protected List formValidators_ ;    public UIForm(String name) {    setRendererType("FormRenderer") ;    mapFields_ = new HashMap(10) ;    containers_ = new ArrayList(3) ;    buttons_ = new ArrayList(5) ;    formName_ = name ;  }  public String getFormName() { return formName_ ; }    public Container addContainer(String label) {    Container container = new Container(label) ;    containers_.add(container) ;    return container;  }    public Container addContainer(Container block) {    containers_.add(block) ;    return block ;  }    public void addButton(Button button) {  buttons_.add(button) ; }    public List getContainers() { return containers_ ; }    public List getActions() { return buttons_ ; }    public Map getMapFields() { return mapFields_ ; }    public Field getField(String fieldName) {    return ((Field)mapFields_.get(fieldName)) ;  }    public StringField getStringField(String fieldName) {    return ((StringField)mapFields_.get(fieldName)) ;  }    public String getStringFieldValue(String fieldName) {    return ((StringField)mapFields_.get(fieldName)).getValue() ;  }    public void setStringFieldValue(String fieldName, String value) {    ((StringField)mapFields_.get(fieldName)).setValue(value) ;  }    public IntegerField getIntegerField(String fieldName) {    return ((IntegerField)mapFields_.get(fieldName)) ;  }    public int getIntegerFieldValue(String fieldName) {    return ((IntegerField)mapFields_.get(fieldName)).getIntValue() ;  }    public void setIntegerFieldValue(String fieldName, int value) {    ((IntegerField)mapFields_.get(fieldName)).setIntValue(value) ;  }    public void  resetFields() {    Iterator i = mapFields_.values().iterator() ;    while(i.hasNext()) {      Object object =  i.next() ;      if(object instanceof StringField) {        StringField field = (StringField) object ;        field.setValue("") ;      }    }  }    public void decode(FacesContext context) {    Map paramMap = context.getExternalContext().getRequestParameterMap();    String uicomponent = (String) paramMap.get(UICOMPONENT) ;    if (uicomponent != null && uicomponent.equals(getId())) {      String action = (String) paramMap.get(ACTION) ;      if(action != null) {        ExoActionEvent event =new ExoActionEvent(this, action);        if(Util.getActionPhaseId(action) == PhaseId.APPLY_REQUEST_VALUES) {          broadcast(event) ;          return  ;        }        InformationProvider iprovider = Util.findInformationProvider(this) ;        Iterator i = mapFields_.values().iterator() ;        while(i.hasNext()) {          Object object =  i.next() ;          if(object instanceof IntegerField) {            IntegerField field = (IntegerField) object ;            field.setError(false) ;            String value = (String)paramMap.get(field.getName()) ;            if(value != null) {              try {                int intValue = Integer.parseInt(value) ;                field.setIntValue(intValue);              } catch (NumberFormatException ex) {                  field.setError(true) ;                Object[] args = {value} ;                iprovider.addMessage(new ExoFacesMessage("#{UIForm.msg.invalid-integer-format}", args)) ;              }              field.setValue(value) ;            }          } else if(object instanceof StringField) {            StringField field = (StringField) object ;            field.setError(false) ;            String value = (String)paramMap.get(field.getName()) ;            if(value != null) field.setValue(value) ;          }        }        queueEvent(event) ;      }    }  }    public void addFieldValidator(Class clazz) {    if(fieldValidators_ == null ) fieldValidators_ = new ArrayList(3) ;    ComponentUtil.addValidator(fieldValidators_, clazz) ;  }    public void addFormValidator(Class clazz) {    if(formValidators_ == null ) formValidators_ = new ArrayList(3) ;    ComponentUtil.addValidator(formValidators_, clazz) ;  }    final public  void processValidators(FacesContext context) {    if(!isRendered()) return ;    InformationProvider iprovider = Util.findInformationProvider(this) ;    //validator fields.........................    Iterator iterator = mapFields_.values().iterator() ;    while(iterator.hasNext()) {      Field field = (Field)iterator.next() ;      Validator v = field.getValidator() ;      try {        if(v != null) v.validate(context, this, field) ;      } catch(ValidatorException ex) {        FacesMessage message = ex.getFacesMessage() ;        iprovider.addMessage(message) ;        context.renderResponse() ;      }      if(fieldValidators_ != null) {        try {          for(int i = 0; i < fieldValidators_.size(); i++) {            v = (Validator) fieldValidators_.get(i) ;            v.validate(context, this, field) ;          }        } catch(ValidatorException ex) {          FacesMessage message = ex.getFacesMessage() ;          iprovider.addMessage(message) ;          context.renderResponse() ;        }      }    }        if(context.getRenderResponse()) return ;    //validate global form    if(formValidators_ != null) {      Validator validator = null ;      try {        for(int i = 0; i < formValidators_.size(); i++) {          validator = (Validator) formValidators_.get(i) ;          validator.validate(context, this, null) ;        }      } catch(ValidatorException ex) {        FacesMessage message = ex.getFacesMessage() ;        iprovider.addMessage(message) ;        context.renderResponse() ;      }    }  }    public String getFamily() {  return COMPONENT_FAMILY ; }    static public class Element {    protected String label_ ;    public Element(String label) {      label_ = label ;    }        public String getLabel() { return label_ ; }  }  public class Container extends Element {    private List fields_ = new ArrayList(8);        public Container(String legend) { super(legend) ; }    public String getLegend() { return label_ ; }        public List getFields() { return fields_ ; }        public Container add(Field field) {      mapFields_.put(field.getName(), field) ;      fields_.add(field) ;      return this ;    }  }  static public class Field extends Element {    protected String name_ ;    protected String css_ ;    private Validator validator_;    private boolean error_ ;    private boolean editable_ = true;        public Field(String name, String label) {      super(label) ;      name_ = name;    }        public String getName() { return name_ ; }        public boolean isEditable() { return editable_  ;}    public void    setEditable(boolean b) { editable_ = b ; }        public boolean hasError() { return error_  ;}    public void    setError(boolean b) { error_ = b ; }        public Validator getValidator() { return validator_ ; }    public Field      setValidator(Validator v) {       validator_ = v ;      return this ;    }        public Field      setValidator(Class clazz) {       validator_ = ComponentUtil.getValidator(clazz) ;      return this ;    }  }  static public class StringField extends Field {    private String value_ ;        public StringField(String name, String label, String value) {      super(name, label) ;      value_ = value ;      if(value_ == null)  value_ = "" ;    }        public String getValue() { return value_ ; }    public void   setValue(String value) { value_ = value ; }  }  static public class StringPasswordField extends StringField {    public StringPasswordField(String name, String label, String value) {      super(name,label, value) ;    }  }  static public class TextAreaField extends StringField {    public TextAreaField(String name, String label, String value) {      super(name,label, value) ;    }  }  static public class SelectBoxField extends StringField {    private List options_  ;        public SelectBoxField(String name, String label, String value, List options) {      super(name,label, value) ;      options_ = options ;    }        public List  getOptions() { return options_ ; }    public void  setOptions(List options) { options_ = options ; }  }  static public class IntegerField extends StringField {    private int intValue_ ;        public IntegerField(String name, String label, int value) {      super(name,label, Integer.toString(value)) ;      intValue_ = value ;    }        public int getIntValue() { return intValue_ ;}    public void  setIntValue(int value) {       setValue(Integer.toString(value)) ;       intValue_ = value ;    }  }  static public class Button extends Element {    protected String action_ ;        public Button(String label, String action) {      super(label) ;      action_ = action;    }        public String getAction() { return action_ ; }  }}