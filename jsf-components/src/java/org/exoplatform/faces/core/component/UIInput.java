/*************************************************************************** * Copyright 2001-2003 The eXo Platform SARL         All rights reserved.  * * Please look at license.txt in info directory for more license detail.   * **************************************************************************/package org.exoplatform.faces.core.component;import java.util.ArrayList;import java.util.List;import javax.faces.application.FacesMessage;import javax.faces.context.FacesContext;import javax.faces.validator.Validator;import javax.faces.validator.ValidatorException;import org.exoplatform.container.PortalContainer;import org.exoplatform.faces.ValidatorManager;import org.exoplatform.faces.core.Util;/** * Wed, Dec 22, 2003 @ 23:14 * @author: Tuan Nguyen * @email:   tuan08@users.sourceforge.net * @version: $Id: UIInput.java,v 1.13 2004/10/23 17:46:29 tuan08 Exp $ */public class UIInput extends UIExoComponentBase {  protected String name_ ;  protected boolean editable_ = true;  protected String keyDown_ ;  protected String keyUp_ ;  protected List validators_ ;  protected boolean error_ ;  protected boolean readonly_ ;  protected String scripting_ ;  final public String getName() { return name_; }  final public UIInput setName(String name) {    name_ = name ;    return this ;  }  public String getScripting() {     return scripting_;  }  public void setScripting(String scripting) {     this.scripting_ = scripting;  }  final public String getKeyDown() { return keyDown_; }  final public UIInput setKeyDown(String onKeyDown) {      keyDown_ = onKeyDown;      return this;  }  final public String getKeyUp() { return keyUp_; }  final public UIInput setKeyUp(String onKeyUp) {      keyUp_ = onKeyUp;      return this;  }  final public boolean  isEditable() { return editable_; }  final public UIInput setEditable(boolean b) {    editable_ = b ;    return this ;  }  final public boolean  isReadonly() { return readonly_; }  final public UIInput setReadonly(boolean b) {    readonly_ = b ;    return this ;  }  public  boolean hasError() { return error_ ; }  protected void addComponentValidator(Validator validator) {    if(validators_ == null ) validators_ = new ArrayList(3) ;    validators_.add(validator) ;  }  protected void addComponentValidator(Class clazz) {    PortalContainer pcontainer = PortalContainer.getInstance() ;    ValidatorManager manager =      (ValidatorManager) pcontainer.getComponentInstanceOfType(ValidatorManager.class) ;    Validator result = manager.getValidator(clazz) ;    if(validators_ == null ) validators_ = new ArrayList(3) ;    validators_.add(result) ;  }  protected  void processValidators(FacesContext context, Object value) {    if(validators_ != null) {      Validator validator = null ;      error_ = false;      try {        for(int i = 0; i < validators_.size(); i++) {          validator = (Validator) validators_.get(i) ;          validator.validate(context, this, value) ;        }      } catch(ValidatorException ex) {        error_ = true ;        FacesMessage message = ex.getFacesMessage() ;        InformationProvider iprovider = Util.findInformationProvider(this) ;        iprovider.addMessage(message) ;        context.renderResponse() ;      }    }  }  final public void processDecodes(FacesContext context) {    decode(context) ;  }  public void encodeChildren(FacesContext context) throws java.io.IOException { }  public void encodeEnd(FacesContext context) throws java.io.IOException { }}