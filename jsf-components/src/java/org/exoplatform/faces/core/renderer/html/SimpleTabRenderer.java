/*************************************************************************** * Copyright 2001-2003 The eXo Platform SARL         All rights reserved.  * * Please look at license.txt in info directory for more license detail.  * **************************************************************************/package org.exoplatform.faces.core.renderer.html;import java.io.IOException;import java.util.List;import java.util.ResourceBundle;import javax.faces.component.UIComponent;import javax.faces.context.FacesContext;import javax.faces.context.ResponseWriter;import org.exoplatform.commons.utils.ExpressionUtil;import org.exoplatform.faces.core.component.UIExoComponent;import org.exoplatform.faces.core.component.Node ;import org.exoplatform.faces.core.component.model.Parameter;public  class SimpleTabRenderer extends NodeMenuRenderer {  final public void encodeChildren( FacesContext context, UIComponent component ) throws IOException {    ResponseWriter w = context.getResponseWriter() ;    ResourceBundle res = getApplicationResourceBundle(context.getExternalContext());    UIExoComponent uiComponent = (UIExoComponent) component ;     List children = uiComponent.getChildren() ;    if(children.size() == 0 ) return ;    UIExoComponent uiSelectTab = null ;        String clazz = uiComponent.getClazz() ;    if (clazz == null) {      w.write("<div>") ;    } else {      w.write("<div class='") ; w.write(clazz) ; w.write("'>") ;     }    if (children.size() > 1) {      Parameter  tabIdParam = new Parameter("tabId" , "");      Parameter[] params = {SELECT_TAB , tabIdParam} ;      w.write("<ul class='"); w.write(getTabCssClass()) ; w.write("'>") ;      for(int i =0; i < children.size(); i++) {        UIExoComponent uiChild = (UIExoComponent) children.get(i) ;        tabIdParam.setValue(uiChild.getId()) ;        String label = null ;        if(uiChild instanceof Node) {          Node uiNode = (Node) uiChild ;          label = uiNode.getName() ;        }         if(label == null) {          label = ExpressionUtil.getValue(res, "UINode.label." + uiChild.getId()) ;        }        w.write("<li>") ;        if(uiChild.isRendered()) {          linkRenderer_.renderSelect(w, uiComponent, label, params) ;          uiSelectTab =  uiChild ;        } else {          linkRenderer_.render(w, uiComponent, label, params) ;        }        w.write("</li>") ;      }      w.write("</ul>") ;    } else {      uiSelectTab = (UIExoComponent) children.get(0) ;    }    w.write("<div class='"); w.write(getTabBodyCssClass()) ; w.write("'>") ;    uiSelectTab.encodeBegin(context) ;    uiSelectTab.encodeChildren(context) ;    uiSelectTab.encodeEnd(context) ;    w.write("</div>") ;    w.write("</div>") ;  }    protected String getTabCssClass() { return "UISimpleTabs" ; }    protected String getTabBodyCssClass() { return "UISimpleTabBody" ; }}