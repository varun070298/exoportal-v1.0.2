/******************************************************************************* * Copyright 2001-2003 The eXo Platform SARL All rights reserved. * Please look * at license.txt in info directory for more license detail. * ******************************************************************************/package org.exoplatform.faces.core.renderer.html;import java.io.IOException;import java.util.Calendar;import java.util.Map;import java.util.ResourceBundle;import javax.faces.component.UIComponent;import javax.faces.context.FacesContext;import javax.faces.context.ResponseWriter;import org.exoplatform.faces.core.component.UIDateInput;import org.exoplatform.faces.core.component.UISimpleForm;public class DateInputRenderer extends HtmlBasicRenderer {  private static final String DAY_EXTENSION = "_dd";  private static final String MONTH_EXTENSION = "_mm";  private static final String YEAR_EXTENSION = "_yyyy";      public void decode(FacesContext context, UIComponent component) {    UIDateInput uiInput = (UIDateInput) component;    Calendar cal = uiInput.getCalendar();    Map paramMap = context.getExternalContext().getRequestParameterMap();    try {      String value = (String) paramMap.get(uiInput.getName() + DAY_EXTENSION);      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(value));      value = (String) paramMap.get(uiInput.getName() + MONTH_EXTENSION);      cal.set(Calendar.MONTH, Integer.parseInt(value));      value = (String) paramMap.get(uiInput.getName() + YEAR_EXTENSION);      cal.set(Calendar.YEAR, Integer.parseInt(value));    } catch (NumberFormatException ex) {      ex.printStackTrace();    }  }  public void encodeBegin(FacesContext context, UIComponent component)  throws IOException {    ResponseWriter w = context.getResponseWriter() ;    UIDateInput uiInput = (UIDateInput) component;       StringBuffer b =  new StringBuffer(200) ;    ResourceBundle res = getApplicationResourceBundle(context.getExternalContext());    String formName = ((UISimpleForm) uiInput.getParent()).getFormName() ;    String name = uiInput.getName() ;    renderJavascript(b, uiInput.getName(), formName, res.getLocale().getLanguage());    Calendar cal = uiInput.getCalendar();    renderField(b, uiInput, name + DAY_EXTENSION,                 cal.get(Calendar.DAY_OF_MONTH), 1,                 cal.getActualMaximum(Calendar.DAY_OF_MONTH));    renderField(b, uiInput, name + MONTH_EXTENSION,                 cal.get(Calendar.MONTH), buildMonthArray(res));    renderField(b, uiInput, name + YEAR_EXTENSION, cal.get(Calendar.YEAR),                 uiInput.getMinYearRange(), uiInput.getMaxYearRange());    renderImage(b, name);    w.write(b.toString()) ;    if (uiInput.hasError()) {      w.write("<span style='color: red'>*</span>");    }  }    private String[] buildMonthArray(ResourceBundle res){    String[] months = new String[12];    for (int i = 0; i < months.length; i++) {      months[i] = res.getString("UIDateInput.month-" + i);    }    return months;      }  private void renderJavascript(StringBuffer b, String name, String formName, String locale) {    b.append("<script language=\"JavaScript\" src=\"/skin/js/calendar/calendar.js\">");    b.append("</script>");    b.append("<script language=\"JavaScript\" src=\"/skin/js/calendar/calendar-setup.js\">");    b.append("</script>");    b.append("<script language=\"JavaScript\" src=\"/skin/js/calendar/lang/calendar-").        append(locale).append(".js\">");    b.append("</script>");    b.append("<script language='JavaScript'>");    b.append("var ").append(name).append(        "_calendar = new Calendar(false, null,");    b.append(name).append("_calendar_onSelect,");    b.append(name).append("_calendar_onClose);");    b.append(name).append("_calendar.weekNumbers = false;");    b.append(name).append("_calendar.firstDayOfWeek = 0;");    b.append(name).append("_calendar.setTtDateFormat(\"%A, %B %e, %Y\");");    b.append(name).append("_calendar.setRange(2000, 2010);");    b.append("function setSelectedValue(col, value) {");    b.append("for (var i = 0; i < col.length; i++) {");    b.append("if (col[i].value == value) {");    b.append("col.selectedIndex = i;");    b.append("break;");    b.append("}}}");    b.append("function ").append(name).append("_calendar_onClick(id) {");    b.append(name).append("_calendar.create();");    b.append(name).append("_calendar.setDate(new Date(");    b.append("document.").append(formName).append(".");    b.append(name).append(YEAR_EXTENSION);    b.append(".value, ");    b.append("document.").append(formName).append(".");    b.append(name).append(MONTH_EXTENSION);    b.append(".value, ");    b.append("document.").append(formName).append(".");    b.append(name).append(DAY_EXTENSION);    b.append(".value));");    b.append(name).append("_calendar.showAtElement(document.getElementById('");    b.append(name);    b.append("_calendarImage'), 'br');");    b.append("}");    b.append("function ").append(name).append(        "_calendar_onClose(cal) {cal.hide();}");    b.append("function ").append(name).append("_calendar_onSelect(cal) {");    b.append("if (cal.dateClicked) {");    b.append("setSelectedValue(");    b.append("document.").append(formName).append(".");    b.append(name).append(MONTH_EXTENSION).append(",");    b.append("cal.date.getMonth());");    b.append("setSelectedValue(");    b.append("document.").append(formName).append(".");    b.append(name).append(DAY_EXTENSION).append(",");    b.append("cal.date.getDate());");    b.append("setSelectedValue(");    b.append("document.").append(formName).append(".");    b.append(name).append(YEAR_EXTENSION).append(",");    b.append("cal.date.getFullYear());");    b.append("cal.callCloseHandler();");    b.append("}");    b.append("}");    b.append("</script>");  }  private void renderImage(StringBuffer b, String name) {    b.append("<img id=\"");    b.append(name);    b.append("_calendarImage\" src=\"");    b.append("/skin/images/calendar/calendar.gif\"");    b.append(" onClick=\"").append(name).append("_calendar_onClick('").append(        name).append("_calendar');\"/>");  }  private void renderField(StringBuffer b, UIDateInput uiInput, String name,                           int value, int minRange, int maxRange) {    b.append("<select  style='width: auto;' name='").append(name).append("'");    if (!uiInput.isEditable() || uiInput.isReadonly()) {      b.append(" disabled='true'");    }    if (uiInput.getClazz() != null) {      b.append(" class='").append(uiInput.getClazz()).append("'");    }    b.append(">\n");    for (int i = minRange; i <= maxRange; i++) {      if (i == value) {        b.append("<option selected=\"selected\" value=\"").append(i).append(            "\">").append(i).append("</option>\n");      } else {        b.append("<option value=\"").append(i).append("\">").append(i).append(            "</option>\n");      }    }    b.append("</select>\n");  }  private void renderField(StringBuffer b, UIDateInput uiInput, String name,                           int value, String[] values) {    b.append("<select style='width: auto;' name='").append(name).append("'");    if (!uiInput.isEditable() || uiInput.isReadonly()) {      b.append(" disabled='true'");    }    if (uiInput.getClazz() != null) {      b.append(" class='").append(uiInput.getClazz()).append("'");    }    b.append(">\n");    for (int i = 0; i < values.length; i++) {      if (i == value) {        b.append("<option selected=\"selected\" value=\"").append(i).append(            "\">").append(values[i]).append("</option>\n");      } else {        b.append("<option value=\"").append(i).append("\">").append(values[i]).append(            "</option>\n");      }    }    b.append("</select>\n");  }  public void encodeChildren(FacesContext context, UIComponent component)      throws IOException {  }  public void encodeEnd(FacesContext context, UIComponent component)      throws IOException {  }}