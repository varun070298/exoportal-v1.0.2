/*************************************************************************** * Copyright 2001-2003 The eXo Platform SARL         All rights reserved.  * * Please look at license.txt in info directory for more license detail.   * **************************************************************************/package org.exoplatform.portal.faces.component;import java.util.ArrayList;import java.util.List;import javax.faces.component.UIComponent;import javax.faces.context.FacesContext;import javax.faces.event.PhaseId;import javax.faces.validator.Validator;import javax.faces.validator.ValidatorException;import org.exoplatform.faces.application.ExoFacesMessage;import org.exoplatform.faces.core.Util;import org.exoplatform.faces.core.component.*;import org.exoplatform.faces.core.component.model.*;import org.exoplatform.faces.core.event.ExoActionEvent;import org.exoplatform.faces.core.event.ExoActionListener;import org.exoplatform.faces.core.validator.EmptyFieldValidator;import org.exoplatform.portal.faces.listener.page.ShowCurrentPageActionListener;import org.exoplatform.portal.session.ExoPortal;import org.exoplatform.services.portal.PortalConfigService;import org.exoplatform.services.portal.model.Node;import org.exoplatform.services.portal.model.PageReference;/** * Sat, Jan 03, 2004 @ 11:16 * @author: Tuan Nguyen * @email: tuan08@users.sourceforge.net * @version: $Id: UIPageNodeForm.java,v 1.19 2004/09/29 17:44:51 benjmestrallet Exp $ */public class UIPageNodeForm extends UISimpleForm {  final static public String  SEARCH_XHTML_REF_PAGE   =     Util.encodeActionPhase("searchXhtmlRefPage", PhaseId.APPLY_REQUEST_VALUES) ;  final static public String  SEARCH_XHTMLMP_REF_PAGE =     Util.encodeActionPhase("searchXhtmlmpRefPage", PhaseId.APPLY_REQUEST_VALUES) ;    static private List PERMISSIONS = new ArrayList() ;  static {    PERMISSIONS.add(new SelectItem("owner", "owner"));    PERMISSIONS.add(new SelectItem("any", "any"));  }  private Cell                uriCell_;  private UIStringInput       nameInput_;  private UIStringInput       labelInput_;  private UISelectBox         viewPermissionInput_;  private UISelectBox         editPermissionInput_;  private UIStringInput       iconInput_;  private UITextArea          descriptionInput_;  private UIStringInput       uiXHTMLReference_;  private UICheckBox          uiXHTMLVisible_;  private UIStringInput       uiXHTMLMPReference_;  private UICheckBox          uiXHTMLMPVisible_;  private Node                selectNode_;  private PortalConfigService service_;  private String              lastSearchAction_;  public UIPageNodeForm(PortalConfigService service) {    super("pageNodeForm", "post", null);    service_ = service;    uriCell_ = new Cell("");     nameInput_ = new UIStringInput("name", "").                 addValidator(EmptyFieldValidator.class).                 addValidator(EmptyFieldValidator.class) ;    labelInput_ = new UIStringInput("displayName", "").                  addValidator(EmptyFieldValidator.class);    iconInput_ = new UIStringInput("icon", "") ;    viewPermissionInput_ = new UISelectBox("viewPermission", "", PERMISSIONS);    editPermissionInput_ = new UISelectBox("editPermission", "", PERMISSIONS);    descriptionInput_ = new UITextArea("description", "") ;    uiXHTMLReference_ =  new UIStringInput("xhtmlPageReference", "").                         addValidator(EmptyFieldValidator.class) ;    uiXHTMLVisible_  =  new UICheckBox("xhtmlVisible", "true") ;    uiXHTMLMPReference_ = new UIStringInput("xhtmlmpPageReference", "") ;    uiXHTMLMPVisible_  =  new UICheckBox("xhtmlmpVisible", "true") ;    String saveButton = "#{UIPageNodeForm.link.save}";    String cancelButton = "#{UIPageNodeForm.link.cancel}";        add(new HeaderRow().        add(new Cell("#{UIPageNodeForm.header.add-edit-navigation-node}").            addColspan("2")));    add(new Row().        add(new LabelCell("#{UIPageNodeForm.label.uri}")).        add(uriCell_));    add(new Row().        add(new LabelCell("#{UIPageNodeForm.label.name}")).        add(new ComponentCell(this, nameInput_)));    add(new Row().        add(new LabelCell("#{UIPageNodeForm.label.display-name}")).        add(new ComponentCell(this, labelInput_)));    add((new Row()).        add(new LabelCell("#{UIPageNodeForm.label.view-permission}")).            add(new ComponentCell(this, viewPermissionInput_)));   add((new Row()).        add(new LabelCell("#{UIPageNodeForm.label.edit-permission}")).            add(new ComponentCell(this, editPermissionInput_)));    add(new Row().        add(new LabelCell("#{UIPageNodeForm.label.icon}")).        add(new ComponentCell(this, iconInput_)));    add(new Row().        add(new LabelCell("#{UIPageNodeForm.label.xhtml-page-reference}")).    	  add(new ListComponentCell().    	      add(this, uiXHTMLReference_ ).    	      add(new FormButton("#{UIPageNodeForm.button.search}", SEARCH_XHTML_REF_PAGE))));    add(new Row().        add(new LabelCell("#{UIPageNodeForm.label.xhtml-visible}")).        add(new ComponentCell(this, uiXHTMLVisible_ )));    add(new Row().        add(new LabelCell("#{UIPageNodeForm.label.xhtmlmp-page-reference}")).    	  add(new ListComponentCell().    	      add(this, uiXHTMLMPReference_ ).    	      add(new FormButton("#{UIPageNodeForm.button.search}", SEARCH_XHTMLMP_REF_PAGE))));    add(new Row().        add(new LabelCell("#{UIPageNodeForm.label.xhtmlmp-visible}")).        add(new ComponentCell(this, uiXHTMLMPVisible_ )));    add(new Row().        add(new LabelCell("#{UIPageNodeForm.label.description}")).        add(new ComponentCell(this, descriptionInput_)));    add(new Row().setClazz("footer").        add(new ListComponentCell().            add(new FormButton(saveButton, SAVE_ACTION)).            add(new FormButton(cancelButton, CANCEL_ACTION)).            addColspan("2").addAlign("center"))) ;    addValidator(NodeNameValidator.class) ;    addActionListener(SaveActionListener.class, SAVE_ACTION) ;    addActionListener(ShowCurrentPageActionListener.class, CANCEL_ACTION) ;    addActionListener(SearchPageActionListener.class, SEARCH_XHTML_REF_PAGE) ;    addActionListener(SearchPageActionListener.class, SEARCH_XHTMLMP_REF_PAGE) ;  }    public void  setEditingNavigationNode(Node node) {    selectNode_ = node ;    if (node != null) {      uriCell_.setValue(node.getUri()) ;      nameInput_.setValue(node.getName()) ;      nameInput_.setEditable(false) ;      labelInput_.setValue(node.getLabel()) ;      viewPermissionInput_.setValue(node.getViewPermission()) ;      editPermissionInput_.setValue(node.getEditPermission()) ;      iconInput_.setValue("") ;      descriptionInput_.setValue("") ;      PageReference xhtmlPageRef = node.getPageReference(ExoPortal.XHTML_MIME_TYPE);      uiXHTMLReference_.setValue(xhtmlPageRef.getPageReference()) ;      uiXHTMLVisible_.setSelect(xhtmlPageRef.isVisible()) ;      PageReference xhtmlmpPageRef = node.getPageReference(ExoPortal.XHTMLMP_MIME_TYPE) ;      if(xhtmlmpPageRef == null) {        uiXHTMLMPReference_.setValue("") ;        uiXHTMLMPVisible_.setSelect(false) ;      } else {        uiXHTMLMPReference_.setValue(xhtmlmpPageRef.getPageReference()) ;        uiXHTMLMPVisible_.setSelect(xhtmlmpPageRef.isVisible()) ;      }    } else {      uriCell_.setValue("");      nameInput_.setValue("");      nameInput_.setEditable(true);      labelInput_.setValue("");      viewPermissionInput_.setValue("") ;      editPermissionInput_.setValue("") ;      iconInput_.setValue("");      descriptionInput_.setValue("");      uiXHTMLReference_.setValue("");      uiXHTMLVisible_.setSelect(false);      uiXHTMLMPReference_.setValue("");      uiXHTMLMPVisible_.setSelect(false);    }  }  public void returnReferencePage(String refPage) {    if (lastSearchAction_.equals(SEARCH_XHTMLMP_REF_PAGE)) {      uiXHTMLMPReference_.setValue(refPage);    } else {      uiXHTMLReference_.setValue(refPage);    }  }  static public class SearchPageActionListener extends ExoActionListener {    public void execute(ExoActionEvent event) throws Exception {      UIPageNodeForm uiForm = (UIPageNodeForm) event.getComponent();      String action = event.getAction();      uiForm.lastSearchAction_ = action;      UIPortal uiPortal = (UIPortal) uiForm.getAncestorOfType(UIPortal.class);      UIPageBrowser uiPageBrowser =         (UIPageBrowser) uiPortal.getPortalComponent(UIPageBrowser.class);      if (uiPageBrowser != null) {        uiPageBrowser.setReturnModule(UIPageBrowser.UI_NAVIGATION_NODE_FORM);        uiPortal.setBodyComponent(uiPageBrowser);      }    }  }  static public class SaveActionListener extends ExoActionListener {    public void execute(ExoActionEvent event) throws Exception {      UIPageNodeForm uiForm = (UIPageNodeForm) event.getComponent();      InformationProvider iprovider = findInformationProvider(uiForm);      uiForm.save(iprovider);    }  }  public void save(InformationProvider iprovider) throws Exception {    UIPortal uiPortal = (UIPortal) getAncestorOfType(UIPortal.class);    if (selectNode_ == null) {      Node currentNode = uiPortal.getSelectedNode();      String parentURI = currentNode.getUri();      if ("/".equals(parentURI))        parentURI = "";      selectNode_ = service_.createNodeInstance();      selectNode_.setUri(parentURI + "/" + nameInput_.getValue());      selectNode_.setName(nameInput_.getValue());      PageReference pref = new PageReference();      pref.setType(ExoPortal.XHTML_MIME_TYPE);      pref.setVisible(true);      selectNode_.getPageReference().add(pref);      currentNode.addChild(selectNode_);    }    selectNode_.setLabel(labelInput_.getValue());    selectNode_.setViewPermission(viewPermissionInput_.getValue()) ;    selectNode_.setEditPermission(editPermissionInput_.getValue()) ;    PageReference pageRef =       selectNode_.getPageReference(ExoPortal.XHTML_MIME_TYPE);    pageRef.setPageReference(uiXHTMLReference_.getValue());    pageRef.setVisible("true".equals(uiXHTMLVisible_.getValue()));    String xhtmlmpReference = uiXHTMLMPReference_.getValue();    if (xhtmlmpReference == null || xhtmlmpReference.length() == 0) {      selectNode_.removePageReference(ExoPortal.XHTMLMP_MIME_TYPE);    } else {      pageRef = selectNode_.getPageReference(ExoPortal.XHTMLMP_MIME_TYPE);      if (pageRef == null) {        pageRef = new PageReference();        pageRef.setType(ExoPortal.XHTMLMP_MIME_TYPE);        selectNode_.getPageReference().add(pageRef);      }      pageRef.setPageReference(xhtmlmpReference);      pageRef.setVisible("true".equals(uiXHTMLMPVisible_.getValue()));    }    uiPortal.setComponentModified(true);    uiPortal.setSelectedNode(selectNode_);    uiPortal.setBodyComponent(uiPortal.getCurrentUIPage());  }  static public class NodeNameValidator implements Validator {    public void validate(FacesContext context, UIComponent component,                         Object value) throws ValidatorException {      UIPageNodeForm uiForm = (UIPageNodeForm) component;      if (uiForm.selectNode_ == null) {        UIPortal uiPortal = (UIPortal) uiForm.getAncestorOfType(UIPortal.class);        Node currentNode = uiPortal.getSelectedNode();        if (currentNode.hasChild(uiForm.nameInput_.getValue())) {          throw new ValidatorException(new ExoFacesMessage("#{UIPageNodeForm.msg.node-name-exist}"));        }      }    }  }}