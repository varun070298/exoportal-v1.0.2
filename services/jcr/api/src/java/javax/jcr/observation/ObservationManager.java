/*
 * $Id: ObservationManager.java,v 1.2 2004/07/24 00:16:23 benjmestrallet Exp $
 *
 * Copyright 2002-2004 Day Management AG, Switzerland.
 *
 * Licensed under the Day RI License, Version 2.0 (the "License"),
 * as a reference implementation of the following specification:
 *
 *   Content Repository API for Java Technology, revision 0.12
 *        <http://www.jcp.org/en/jsr/detail?id=170>
 *
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License files at
 *
 *     http://www.day.com/content/en/licenses/day-ri-license-2.0
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package javax.jcr.observation;

import javax.jcr.RepositoryException;

/**
 * The ObservationManager object.
 * <p/>
 * <b>Level 2 only</b>
 * <p/>
 * Acquired via <code>Ticket.getObservationManager()</code>.
 * Allows for the registration and deregistration of observation listeners.
 *
 * @author Tim Anderson
 * @author Peeter Piegaze
 * @author Stefan Guggisberg
 */
public interface ObservationManager {

  /**
   * Add an observation listener (parameter <code>listener</code>) which listens
   * for the specified <code>events</code> that originate from the item at
   * <code>absPath</code> (including all children up to <code>depth</code>,
   * where -1 indicates an "infinite" depth). It is possible to register a
   * listener for a path where no item currently exists.
   * <p/>
   * If <code>noLocal</code> is true
   * then events generated by the owning ticket are ignored. To reduce the
   * number of events an observation selector can be specified. An observation selector
   * discards events that aren’t applicable. The events are selected based on
   * observation content rather than observation type. This also enables the repository
   * implementation to filter events before they are dispatched, to reduce
   * bandwidth. The <code>eventSelector</code> parameter specifies the
   * expression used to filter events. This uses a subset of the ContentSQL
   * syntax:
   * <p/>
   * <code>
   * propertyname operator value { ["AND" | "OR"] propertyname operator value}
   * </code>
   *
   * @param eventTypes A combination of one or more of the following constants
   *                   encoded as a bitmask value:
   *                   <ul>
   *                   <li><code>EventType.ITEM_ADDED</code></li>
   *                   <li><code>EventType.ITEM_CHANGED</code></li>
   *                   <li><code>EventType.ITEM_REMOVED</code></li>
   *                   <li><code>EventType.ITEM_VERSIONED</code></li>
   *                   <li><code>EventType.LABEL_ADDED</code></li>
   *                   <li><code>EventType.LABEL_REMOVED</code></li>
   *                   <li><code>EventType.ITEM_LOCKED</code></li>
   *                   <li><code>EventType.ITEM_UNLOCKED</code></li>
   *                   <li><code>EventType.LOCK_EXPIRED</code></li>
   *                   </ul>
   *                   See <code>{EventType}</code>.
   * @param absPath    Specifies the item path that the listener wants to receive
   *                   events for. It is possible to register a listener for a path
   *                   where no item currently exists.
   * @param depth      Specifies whether the registration is for the item named
   *                   by <code>absPath</code> (depth = 0), the item and its immediate children
   *                   (depth = 1), or some other depth of tree. A depth value of –1 corresponds
   *                   to an "infinite depth", meaning the entire sub-tree rooted at
   *                   <code>absPath</code>.
   * @param listener   The listener object that will "do the listening".
   * @param noLocal    If <code>true</code>, supresses receipt of events
   *                   generated by the owning ticket instance.
   * @param selector   An <code>EventSelector</code> object whose <code>accept</code>
   *                   method can be used to filter events, based on their content.
   * @throws RepositoryException If an error occurs.
   */
  public void addEventListener(long eventTypes, String absPath, int depth, EventListener listener, boolean noLocal, EventSelector selector)
      throws RepositoryException;

  /**
   * Same as <code>{@link #addEventListener(long eventTypes, String absPath, int depth, EventListener listener, boolean noLocal, EventSelector selector)}</code>
   * except for <code>VetoableEventListener</code>s instead of
   * <code>EventListener</code>s.
   *
   * @param eventTypes A combination of one or more of the following constants
   *                   encoded as a bitmask value:
   *                   <ul>
   *                   <li><code>EventType.ITEM_ADDED</code></li>
   *                   <li><code>EventType.ITEM_CHANGED</code></li>
   *                   <li><code>EventType.ITEM_REMOVED</code></li>
   *                   <li><code>EventType.ITEM_VERSIONED</code></li>
   *                   <li><code>EventType.LABEL_ADDED</code></li>
   *                   <li><code>EventType.LABEL_REMOVED</code></li>
   *                   <li><code>EventType.ITEM_LOCKED</code></li>
   *                   <li><code>EventType.ITEM_UNLOCKED</code></li>
   *                   <li><code>EventType.LOCK_EXPIRED</code></li>
   *                   </ul>
   *                   See <code>{EventType}</code>.
   * @param absPath    Specifies the item path that the listener wants to receive
   *                   events for.
   * @param depth      Specifies whether the registration is for the item named
   *                   by <code>absPath</code> (depth = 0), the item and its immediate children
   *                   (depth = 1), or some other depth of tree. A depth value of –1 corresponds
   *                   to an "infinite depth", meaning the entire sub-tree rooted at
   *                   <code>absPath</code>.
   * @param listener   The listener object that will "do the listening".
   * @param noLocal    If <code>true</code>, supresses receipt of events
   *                   generated by the owning ticket instance.
   * @param selector   An <code>EventSelector</code> object whose <code>accept</code>
   *                   method can be used to filter events based on their content.
   * @throws RepositoryException If an error occurs.
   */
  public void addVetoableEventListener(long eventTypes, String absPath, int depth, VetoableEventListener listener, boolean noLocal, EventSelector selector) throws RepositoryException;

  /**
   * Deregisters an observation listener.
   * <p/>
   * A listener may be deregistered while it is being executed. The
   * deregistration method will block until the listener has completed
   * executing. An exception to this rule is a listener which deregisters
   * itself from within the <code>onEvent</code> method. In this case, the
   * deregistration method returns immediately, but deregistration will
   * effectively be delayed until the listener completes.
   *
   * @param listener The listener to deregister.
   * @throws RepositoryException If an error occurs.
   */
  public void removeEventListener(EventListener listener) throws RepositoryException;

  /**
   * Deregisters a vetoable observation listener.
   * <p/>
   * A listener may be deregistered while it is being executed. The
   * deregistration method will block until the listener has completed
   * executing. An exception to this rule is a listener which deregisters
   * itself from within the <code>onEvent</code> method. In this case, the
   * deregistration method returns immediately, but deregistration will
   * effectively be delayed until the listener completes.
   *
   * @param listener The vetoable listener to deregister.
   * @throws RepositoryException If an error occurs.
   */
  public void removeVetoableEventListener(VetoableEventListener listener) throws RepositoryException;
}
