/*************************************************************************** * Copyright 2001-2003 The eXo Platform SARL         All rights reserved.  * * Please look at license.txt in info directory for more license detail.   * **************************************************************************/package org.exoplatform.services.organization.hibernate;import java.io.InputStream;import java.util.Collection;import java.util.Enumeration;import java.util.Iterator;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;import java.util.zip.ZipOutputStream;import net.sf.hibernate.Session;import org.picocontainer.Startable;import org.exoplatform.services.backup.ImportExportPlugin;import org.exoplatform.services.backup.Metadata;import org.exoplatform.services.backup.XMLObjectConverter;import org.exoplatform.services.backup.ImportExportService;import org.exoplatform.services.database.XResources;import org.exoplatform.services.organization.Group;import org.exoplatform.services.organization.MembershipType;import org.exoplatform.services.organization.User;import org.exoplatform.services.organization.UserProfile;import org.exoplatform.services.organization.impl.GroupImpl;import org.exoplatform.services.organization.impl.MembershipTypeImpl;import org.exoplatform.services.organization.impl.UserImpl;import org.exoplatform.xml.object.XMLCollection;import org.exoplatform.xml.object.XMLObject;/** * May 27, 2004  * @author: Tuan Nguyen * @email:   tuan08@users.sourceforge.net * @version: $ID$ **/public class ImportExportPluginImpl extends ImportExportPlugin implements Startable {  static String PLUGIN_NAME = "organization" ;  static String USER_META_DATA_ENTRY   = "organization/metadata.xml" ;  static String USER_DATA_ENTRY = "organization/User.xml" ;  static String USER_PROFILE_DATA_ENTRY = "organization/UserProfile.xml" ;  static String USER_MEMBERSHIPS_DATA_ENTRY = "organization/Memberships.xml" ;  static String SERVICE_META_DATA_ENTRY   = "metadata.xml" ;    OrganizationServiceImpl orgService_ ;  public ImportExportPluginImpl(OrganizationServiceImpl service,                                 ImportExportService ieservice) throws Exception {    setName("organization") ;    setDescription("organization import/export plugin") ;    ieservice.addPlugin(this) ;    orgService_ = service ;    init() ;  }  public void exportUserData(String userName, XResources resources, ZipOutputStream os) throws Exception {    Metadata mdata = new Metadata(getCurrentDataVersion(), getDescription(), "single-user") ;    createEntry(USER_META_DATA_ENTRY , os, mdata) ;     Session session = (Session) resources.getResource(Session.class);    Object object = orgService_.userQueryHandler_.findUserByName(userName, session) ;    createEntry(USER_DATA_ENTRY, os, object) ;     object =orgService_.userProfileQueryHandler_.findUserProfileByName(userName, session) ;    createEntry(USER_PROFILE_DATA_ENTRY, os, object) ;     object = orgService_.membershipQueryHandler_.findMembershipsByUser(userName, session) ;    createEntry(USER_MEMBERSHIPS_DATA_ENTRY, os, object) ;   }    public void importUserData(String username, XResources resources, ZipFile zipFile) throws Exception {    Session session = (Session) resources.getResource(Session.class);    removeExistingUserData(username, session) ;    Metadata mdata = getMetadata(USER_META_DATA_ENTRY, zipFile) ;    String dataVersion = mdata.getDataVersion() ;    XMLObjectConverter converter = getXMLObjectConverter(dataVersion) ;    //import user data    XMLObject xmlobject = XMLObject.getXMLObject(getEntry(USER_DATA_ENTRY, zipFile)) ;    if(converter != null) converter.traverse(xmlobject) ;    User user = (User) xmlobject.toObject() ;    orgService_.userQueryHandler_.createUserEntry(user, session) ;    //import user profile data    xmlobject = XMLObject.getXMLObject(getEntry(USER_PROFILE_DATA_ENTRY, zipFile)) ;    if(converter != null) converter.traverse(xmlobject) ;    UserProfile up = (UserProfile)xmlobject.toObject() ;    orgService_.userProfileQueryHandler_.createUserProfileEntry(up, session) ;    //import user memberships    XMLCollection xmlCol =        XMLCollection.getXMLCollection(getEntry(USER_MEMBERSHIPS_DATA_ENTRY, zipFile)) ;    if(converter != null) converter.traverse(xmlCol) ;    Collection memberships = xmlCol.getCollection() ;    MembershipQueryHandler.createMembershipEntries(memberships, session) ;  }  public void exportServiceData(XResources resources, ZipOutputStream os) throws Exception {    Metadata mdata = new Metadata(getCurrentDataVersion(), getDescription(),"single-service") ;    createEntry(SERVICE_META_DATA_ENTRY , os, mdata) ;     Session session = (Session) resources.getResource(Session.class);    Collection groups =       session.find("from g in class org.exoplatform.services.organization.impl.GroupImpl") ;    Iterator i = groups.iterator() ;    while(i.hasNext()) {      Group data = (Group) i.next() ;      ZipEntry entry = new ZipEntry("group/" + data.getId()+ ".xml") ;      os.putNextEntry(entry) ;      XMLObject xmlobject = new XMLObject(data) ;      os.write(xmlobject.toByteArray("UTF-8")) ;      os.closeEntry() ;    }    Collection membershipTypes =       session.find("from m in class org.exoplatform.services.organization.impl.MembershipTypeImpl") ;    i = membershipTypes.iterator() ;    while(i.hasNext()) {      MembershipType data = (MembershipType) i.next() ;      ZipEntry entry = new ZipEntry("membership-type/" +data.getName()+ ".xml") ;      os.putNextEntry(entry) ;      XMLObject xmlobject = new XMLObject(data) ;      os.write(xmlobject.toByteArray("UTF-8")) ;      os.closeEntry() ;    }  }  public void importServiceData(XResources resources, ZipFile in) throws Exception {    Session session = (Session) resources.getResource(Session.class);    Metadata mdata = getMetadata(SERVICE_META_DATA_ENTRY, in) ;    String dataVersion = mdata.getDataVersion() ;    XMLObjectConverter converter = getXMLObjectConverter(dataVersion) ;    Enumeration e = in.entries() ;    XMLObject xmlobject = null ;    while(e.hasMoreElements()) {      ZipEntry entry = (ZipEntry) e.nextElement() ;      InputStream is = in.getInputStream(entry) ;      xmlobject = XMLObject.getXMLObject(is) ;      if(converter != null) converter.traverse(xmlobject) ;      String entryName = entry.getName() ;      if(entryName.startsWith("group/")) {        GroupImpl data = (GroupImpl) xmlobject.toObject() ;         GroupQueryHandler.removeGroupEntry(data.getGroupName(), session) ;        session.save(data) ;      } else if(entryName.startsWith("membership-type/")) {        MembershipTypeImpl data = (MembershipTypeImpl)xmlobject.toObject() ;         MembershipTypeQueryHandler.removeMembershipTypeEntry(data.getName(), session) ;        session.save(data) ;      }    }  }      private void removeExistingUserData(String userName, Session session) throws Exception {    UserImpl user =      (UserImpl) orgService_.userQueryHandler_.findUserByName(userName, session) ;    if (user != null) {       orgService_.userQueryHandler_.removeUserEntry(user, session) ;       MembershipQueryHandler.removeMembershipEntriesOfUser(userName, session) ;       UserProfileQueryHandler.removeUserProfileEntry(userName, session) ;    }  }  public void start() {  }  public void stop() {  }}