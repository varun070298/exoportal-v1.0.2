/*************************************************************************** * Copyright 2001-2003 The eXo Platform SARL         All rights reserved.  * * Please look at license.txt in info directory for more license detail.   * **************************************************************************/package org.exoplatform.portlets.monitor.portlet.component;import java.util.* ;import javax.faces.context.FacesContext ;import org.exoplatform.faces.FacesConstants;import org.exoplatform.faces.core.component.UIExoComponentBase;import org.exoplatform.portlets.monitor.portlet.component.model.*;import org.exoplatform.services.portletcontainer.monitor.PortletRuntimeData;/** * Wed, Dec 22, 2003 @ 23:14  * @author: Tuan Nguyen * @email:   tuan08@users.sourceforge.net * @version: $Id: UIPortletMenu.java,v 1.3 2004/08/02 12:04:26 tuan08 Exp $ */public class UIPortletMenu extends UIExoComponentBase {  private Map portletApps_ ;  public UIPortletMenu(Collection datas) {    setRendererType("PortletMenuRenderer");    portletApps_ = new HashMap() ;    reset(datas) ;	}    public void reset(Collection datas) {    portletApps_.clear() ;    Iterator i = datas.iterator();    while(i.hasNext()) {    	PortletRuntimeData rd = (PortletRuntimeData) i.next() ;    	String appName = rd.getPortletAppName() ;    	PortletApplicationData app = (PortletApplicationData) portletApps_.get(appName);      if(app == null) {        app = new PortletApplicationData(appName) ;        portletApps_.put(appName, app);      }      app.put(rd) ;    }  }  public Collection getPortletApplications() { return portletApps_.values() ; }  public String getFamily() {     return "org.exoplatform.portlets.monitor.portlet.component.UIPortletMenu" ;  }  public void decode(FacesContext context) {    Map paramMap = context.getExternalContext().getRequestParameterMap() ;    String action = (String) paramMap.get(FacesConstants.ACTION) ;    if("selectPortletApp".equals(action)) {    	String portletAppName = (String) paramMap.get("portletAppName") ;    	PortletApplicationData appData = (PortletApplicationData)portletApps_.get(portletAppName) ;    	appData.setSelect(!appData.isSelect()) ;    	context.renderResponse() ;    } else if("showPortletAppMonitor".equals(action)) {    	String portletAppName = (String) paramMap.get("portletAppName") ;    	PortletApplicationData appData = (PortletApplicationData)portletApps_.get(portletAppName) ;    	appData.setSelect(true) ;    	UIPortletContainerMonitor uiParent = (UIPortletContainerMonitor) getParent() ;    	UIPortletApplicationMonitor uiAppMonitor = uiParent.getUIPortletApplicationMonitor() ;    	uiAppMonitor.setPortletApplicationData(appData) ;    	uiParent.showMonitor(uiAppMonitor) ;    	context.renderResponse() ;    } else if("showPortletMonitor".equals(action)) {      String portletAppName = (String) paramMap.get("portletAppName") ;      String portletName = (String) paramMap.get("portletName") ;      PortletApplicationData appData = (PortletApplicationData)portletApps_.get(portletAppName) ;      PortletRuntimeData rtd = appData.getPortletRuntimeData(portletName) ;      UIPortletContainerMonitor uiParent = (UIPortletContainerMonitor) getParent() ;      UIPortletMonitor uiPortletMonitor = uiParent.getUIPortletMonitor() ;      uiPortletMonitor.setPortletRuntimeData(rtd) ;      uiParent.showMonitor(uiPortletMonitor) ;      context.renderResponse() ;    }  }} 