/*************************************************************************** * Copyright 2001-2003 The eXo Platform SARL         All rights reserved.  * * Please look at license.txt in info directory for more license detail.   * **************************************************************************/package org.exoplatform.portlets.monitor.portlet.renderer.html;import java.io.IOException;import java.util.Date;import java.util.Iterator;import java.util.ResourceBundle;import javax.faces.component.UIComponent;import javax.faces.context.FacesContext;import javax.faces.context.ResponseWriter;import org.exoplatform.faces.core.renderer.html.HtmlBasicRenderer;import org.exoplatform.portlets.monitor.portlet.component.UIPortletApplicationMonitor;import org.exoplatform.portlets.monitor.portlet.component.model.PortletApplicationData;import org.exoplatform.services.portletcontainer.monitor.PortletRuntimeData;/** * Apr 28, 2004 * @author: Tuan Nguyen * @email:   tuan08@users.sourceforge.net * @version: $Id: PortletApplicationMonitorRenderer.java,v 1.4 2004/08/28 18:59:20 tuan08 Exp $ **/public class PortletApplicationMonitorRenderer extends HtmlBasicRenderer {  public void encodeChildren( FacesContext context, UIComponent component ) throws IOException {    UIPortletApplicationMonitor uiMonitor = (UIPortletApplicationMonitor) component ;    ResourceBundle res = getApplicationResourceBundle(context.getExternalContext()) ;    ResponseWriter w = context.getResponseWriter() ;    PortletApplicationData appData = uiMonitor.getPortletApplicationData() ;    w.write("<table class='UIPortletApplicationMonitor'>") ;    w.  write("<tr>") ;    w.    write("<th>"); w.write(res.getString("UIPortletApplicationMonitor.header.portlet-name")) ; w.write("</th>") ;    w.    write("<th>"); w.write(res.getString("UIPortletApplicationMonitor.header.initialized")) ; w.write("</th>") ;    w.    write("<th>"); w.write(res.getString("UIPortletApplicationMonitor.header.initialization-time")); w.write("</th>") ;    w.    write("<th>"); w.write(res.getString("UIPortletApplicationMonitor.header.last-access-time")); w.write("</th>") ;    w.    write("<th>"); w.write(res.getString("UIPortletApplicationMonitor.header.last-failure-access-time")); w.write("</th>") ;    w.    write("<th>"); w.write(res.getString("UIPortletApplicationMonitor.header.last-init-failure-access-time")); w.write("</th>") ;    w.  write("</tr>") ;    Iterator portletDatasItr = appData.getPortletRuntimeDatas().iterator();    int i = 0;    Date time = new Date();    while(portletDatasItr.hasNext()) {      PortletRuntimeData rtd = (PortletRuntimeData)portletDatasItr.next() ;      String clazz = "odd";      if (i % 2 == 0)        clazz = "even";      w.write("<tr  class='" + clazz + "'>") ;      w.  write("<td>"); w.write(rtd.getPortletName()) ; w.write("</td>") ;      w.  write("<td>"); w.write(Boolean.toString(rtd.isInitialized())) ; w.write("</td>") ;      w.  write("<td>"); w.write(formatTime(rtd.getInitializationTime(), time)) ; w.write("</td>") ;      w.  write("<td>"); w.write(formatTime(rtd.getLastAccessTime(), time)) ; w.write("</td>") ;      w.  write("<td>"); w.write(formatTime(rtd.getLastFailureAccessTime(), time)) ; w.write("</td>") ;      w.  write("<td>"); w.write(formatTime(rtd.getLastInitFailureAccessTime(), time)) ; w.write("</td>") ;      w.write("</tr>") ;      i++;    }    w.write("</table>") ;  }  private String formatTime(long t, Date time) {  	if (t <= 0) return "-" ;    time.setTime(t) ;  	return ft_.format(time) ;  }}