/*************************************************************************** * Copyright 2001-2003 The eXo Platform SARL         All rights reserved.  * * Please look at license.txt in info directory for more license detail.   * **************************************************************************/package org.exoplatform.portlets.communication.message.renderer.html;import java.io.IOException;import java.util.*;import javax.faces.component.UIComponent;import javax.faces.context.FacesContext;import javax.faces.context.ResponseWriter;import org.exoplatform.faces.core.component.model.Parameter;import org.exoplatform.faces.core.renderer.html.*;import org.exoplatform.portlets.communication.message.component.*;import org.exoplatform.services.communication.message.*;/** * @author Tuan Nguyen (tuan08@users.sourceforge.net) * @since Aug 27, 2004 * @version $Id: MessagesRenderer.java,v 1.3 2004/11/03 04:24:55 tuan08 Exp $  */public class MessagesRenderer extends HtmlBasicRenderer {    public MessagesRenderer()  {    buttonRenderer_ = new ThreeImagePatternButton("ic3-button", "ic3-select-button") ;   }    public void encodeChildren(FacesContext context, UIComponent component)  throws IOException {    UIMessages uiFolder = (UIMessages) component;    ResponseWriter w = context.getResponseWriter();    ResourceBundle res = getApplicationResourceBundle(context.getExternalContext());    w.write("<table class='UIMessageFolder'>");    w.  write("<tr>");    w.    write("<th>");    w.      write(res.getString("UIMessages.header.icon"));    w.    write("</th>");        w.    write("<th>"); w.write(res.getString("UIMessages.header.subject")); w.write("</th>");    w.    write("<th>"); w.write(res.getString("UIMessages.header.from"));  w.write("</th>");    w.    write("<th>");  w.write(res.getString("UIMessages.header.date"));  w.write("</th>");    w.  write("</tr>");    List messages = uiFolder.getMessages();    Parameter messageIdParam = new Parameter(UIMessages.MESSAGE_ID, "");    Parameter[] viewMessageParams = { UIMessages.viewMessageParam_,  messageIdParam };    if (messages.size() == 0) {      w.write("<tr>");      w.  write("<td colspan='4'>");        w.    write(res.getString("UIMessages.label.no-message"));       w.  write("</td>");      w.write("</tr>");                } else {      for (int i = 0; i < messages.size(); i++) {        Message message = (Message) messages.get(i);        String subject = message.getSubject();        if (subject == null || subject.length() == 0)          subject = "No Subject";        messageIdParam.setValue(message.getId());        if(message.isNew())          w.write("<tr class='new'>");        else           w.write("<tr class='read'>");                   w.write("<td>");  w.write(resolveIcon(res, message));   w.write("</td>");                w.write("<td class='subject'>");        linkRenderer_.render(w, uiFolder, subject, viewMessageParams);        w.write("</td>");        w.write("<td>");  w.write(ft_.format(message.getFrom())); w.write("</td>");        w.write("<td>");   w.write(ft_.format(message.getReceivedDate()));   w.write("</td>");        w.write("</tr>");      }    }    w.write("<tr>");    w.  write("<td colspan='4' class='footer'>");      renderChildren(context, component) ;    w.  write("</td>");      w.write("</tr>");        w.write("</table>");  }  private String resolveIcon(ResourceBundle res, Message message) {    String icon = "";    if(message.isNew()){      icon = res.getString("UIMessages.icon.new");    }else {      icon = res.getString("UIMessages.icon.read");    }    return icon;  }}